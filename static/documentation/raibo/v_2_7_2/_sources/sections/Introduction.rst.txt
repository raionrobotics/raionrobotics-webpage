#############################
Introduction
#############################

Raisin is a control platform to manage legged robots.

Overview
***********************************************

1. **C++-based Core (with a few Python scripts)**:
The main framework is developed in C++ for performance and reliability, with supplemental tools in Python where appropriate.

2. **ROS-Inspired Architecture with Shared APIs**:
Our system is designed to resemble ROS, making it easier to onboard developers familiar with ROS and to port existing ROS packages into our framework with minimal changes.

3. **Designed for Easy Customization**:
Our primary users are not end-users, but developers building their own systems. The software is modular and extensible to support rapid development and adaptation.

4. **Foundation Layer, Not a Full Solution**:
We provide a set of baseline components and tools. Our customers are expected to build complete applications and solutions on top of this foundation.

Key Features
***********************************************

- **Build System**: :doc:`RaisinMaster <RaisinMaster>` is a fast, lightweight build system that replaces colcon in ROS2, leveraging CMake for efficient builds.

- **Data Communication**: :doc:`RaisinNetwork <RaisinNetwork>` for efficient data exchange between components, similar to ROS topics and services.

- **Utilities**:
    * :doc:`Parameter <Parameter>` for managing configuration settings.
    * :doc:`DataLogger <DataLogger>` for logging and analyzing data from the robot and its environment.

- **Executables**:
    * :doc:`RaiboNode <RaiboNode>` runs on the robot PC and manages the interaction between the robot and its environment by processing sensor data and issuing torque commands. It can be customized using :doc:`Plugin <Plugin>` and :doc:`Controller <Controller>`.
    * :doc:`RaisinGui <RaisinGui>` runs on a remote PC and provides a graphical interface for monitoring and controlling the robot. It can be extended by creating custom windows.

..  Its primary function is to facilitate the interaction between robots and their environment by handling sensor data and torque commands efficiently.
..
.. To control a robot, the robot should get observations via sensor measurement, and based on that, give torque command to a robot.
..
.. Here’s how Raisin operates:
..
.. * **Data Flow Management**: At the core of Raisin's functionality is the ``worldHub_`` variable, which acts as a central hub for data flow. It collects sensor measurements from the real world and, based on these inputs, issues torque commands back to the robot.
..
.. * **Use of Plugins**: To enhance estimation of the world—including both the environment and the robot itself—Raisin supports the use of plugins. These can be employed simultaneously and are managed automatically by ``PluginManager``. Plugins help in refining the robot's perception and interaction with its surroundings.
..
.. * **Controller Interaction**: A controller within Raisin processes the estimated states provided by the plugins. It then formulates commands which are passed on to ``worldHub_``. These commands are subsequently executed by the real robot. The system ensures that only one controller is active at any given time, managed by the ``ControllerManager``.
..
.. * **Simulation Testing**: Before deployment in the real world, it's advisable to test the robot in a simulated environment managed by ``worldSim_``. This simulation acts as a proxy for the real world, allowing for safe and controlled testing of robot behaviors and commands. ``worldHub_`` will be visualized on port **8080**, and ``worldSim_`` will be visualized on port **7000**. **For simulating sensors, please ensure that you use raisimUnreal on port 7000.**
..
.. * **Cautions for Real-World Application**: While successful simulation tests are indicative of potential real-world performance, they do not guarantee identical outcomes in real environments. It's crucial to approach real-world deployment cautiously and make adjustments based on real-world feedback and conditions.
